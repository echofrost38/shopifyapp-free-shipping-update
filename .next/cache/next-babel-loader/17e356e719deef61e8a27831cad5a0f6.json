{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, ColorPicker, TextField, Popover } from '@shopify/polaris';\nimport { hsbToHex, rgbToHsb } from '@shopify/polaris'; // interchange will always be hex\n\nexport default class HexColorPicker extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isColorPickerOpen: false,\n      textValue: \"\"\n    };\n    this.state.textValue = this.props.color;\n    this.toggleColorPicker = this.toggleColorPicker.bind(this);\n    this.handleTextChange = this.handleTextChange.bind(this);\n  }\n\n  hexToRgb(hex) {\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n      return r + r + g + g + b + b;\n    });\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      red: parseInt(result[1], 16),\n      green: parseInt(result[2], 16),\n      blue: parseInt(result[3], 16)\n    } : null;\n  }\n\n  toggleColorPicker() {\n    this.setState({\n      isColorPickerOpen: !this.state.isColorPickerOpen\n    });\n  }\n\n  formatHexToHsb(hex) {\n    return rgbToHsb(this.hexToRgb(hex));\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.color !== this.props.color) {\n      this.setState({\n        textValue: nextProps.color\n      });\n    }\n  }\n\n  handleTextChange(value) {\n    this.setState({\n      textValue: value\n    });\n\n    try {\n      let color = this.hexToRgb(value);\n\n      if (color) {\n        this.props.onChange(value);\n      }\n    } catch (err) {}\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(Popover, {\n      active: this.state.isColorPickerOpen,\n      onClose: this.toggleColorPicker,\n      activator: __jsx(TextField, {\n        label: this.props.label,\n        onChange: this.handleTextChange,\n        value: this.state.textValue,\n        connectedRight: __jsx(Button, {\n          onClick: this.toggleColorPicker\n        }, __jsx(\"div\", {\n          className: \"color-preview\",\n          style: {\n            backgroundColor: this.props.color,\n            width: '20px',\n            height: '20px'\n          }\n        }))\n      })\n    }, __jsx(ColorPicker, {\n      onChange: color => this.props.onChange(hsbToHex(color)),\n      color: this.formatHexToHsb(this.props.color)\n    })));\n  }\n\n}\n\n_defineProperty(HexColorPicker, \"propTypes\", {\n  color: PropTypes.string,\n  label: PropTypes.string,\n  onChange: PropTypes.func\n});","map":{"version":3,"sources":["E:/WORSPACE/shopify/work/shopifyapp-shipping-bar/components/TextPicker.js"],"names":["React","Component","PropTypes","Button","ColorPicker","TextField","Popover","hsbToHex","rgbToHsb","HexColorPicker","constructor","props","state","isColorPickerOpen","textValue","color","toggleColorPicker","bind","handleTextChange","hexToRgb","hex","shorthandRegex","replace","m","r","g","b","result","exec","red","parseInt","green","blue","setState","formatHexToHsb","componentWillReceiveProps","nextProps","value","onChange","err","render","label","backgroundColor","width","height","string","func"],"mappings":"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","sourcesContent":["\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Button, ColorPicker, TextField, Popover} from '@shopify/polaris';\r\nimport {hsbToHex, rgbToHsb} from '@shopify/polaris';\r\n\r\n// interchange will always be hex\r\n\r\nexport default class HexColorPicker extends Component {\r\n  static propTypes = {\r\n    color: PropTypes.string,\r\n    label: PropTypes.string,\r\n    onChange: PropTypes.func\r\n  }\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      isColorPickerOpen: false,\r\n      textValue: \"\"\r\n    };\r\n    this.state.textValue = this.props.color;\r\n    this.toggleColorPicker = this.toggleColorPicker.bind(this);\r\n    this.handleTextChange = this.handleTextChange.bind(this);\r\n  }\r\n\r\n  hexToRgb(hex) {\r\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n    hex = hex.replace(shorthandRegex, function(m, r, g, b) {\r\n        return r + r + g + g + b + b;\r\n    });\r\n\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? {\r\n        red: parseInt(result[1], 16),\r\n        green: parseInt(result[2], 16),\r\n        blue: parseInt(result[3], 16)\r\n    } : null;\r\n  }\r\n  toggleColorPicker(){\r\n    this.setState({isColorPickerOpen: !this.state.isColorPickerOpen});\r\n  }\r\n  formatHexToHsb(hex){\r\n    return rgbToHsb(this.hexToRgb(hex));\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if(nextProps.color !== this.props.color){\r\n      this.setState({textValue: nextProps.color});\r\n    } \r\n  }\r\n\r\n  handleTextChange(value){\r\n    this.setState({textValue: value});\r\n    try{\r\n      let color = this.hexToRgb(value);\r\n      if(color){\r\n        this.props.onChange(value);\r\n      }\r\n    }catch(err){\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <Popover\r\n          active={this.state.isColorPickerOpen}\r\n          onClose={this.toggleColorPicker}\r\n          activator={<TextField label={this.props.label} onChange={this.handleTextChange} value={this.state.textValue} connectedRight={\r\n                  <Button onClick={this.toggleColorPicker}>\r\n                    <div className=\"color-preview\" style={{backgroundColor: this.props.color, width: '20px', height: '20px'}} > \r\n                    </div>\r\n                  </Button>} />}\r\n        >\r\n          <ColorPicker onChange={(color) => this.props.onChange(hsbToHex(color))} color={this.formatHexToHsb(this.props.color)} />\r\n        </Popover>\r\n      </div>\r\n    )\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}