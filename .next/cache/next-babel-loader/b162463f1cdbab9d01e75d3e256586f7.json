{"ast":null,"code":"import _readOnlyError from \"@babel/runtime/helpers/esm/readOnlyError\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Button, Card, Form, FormLayout, Layout, Page, SettingToggle, Stack, TextField, TextStyle, DataTable, Heading, Badge, Select, Checkbox, ChoiceList, ColorPicker, Popover, RangeSlider } from '@shopify/polaris';\nimport { hsbToHex, rgbToHsb } from '@shopify/polaris';\nimport PropTypes from 'prop-types';\nimport fsbStyles from './styles/free-shipping-bar.module.css';\nimport { LoneAnonymousOperationRule } from 'graphql';\n\nvar FreeShippingBar = /*#__PURE__*/function (_React$Component) {\n  _inherits(FreeShippingBar, _React$Component);\n\n  var _super = _createSuper(FreeShippingBar);\n\n  function FreeShippingBar(props) {\n    var _this;\n\n    _classCallCheck(this, FreeShippingBar);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmit\", function () {\n      _this.setState({\n        name: _this.state.name,\n        goal: _this.state.goal\n      });\n\n      console.log('submission', _this.state);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (field) {\n      return function (value) {\n        return _this.setState(_defineProperty({}, field, value));\n      };\n    });\n\n    _this.state = {\n      isColorPickerOpen: false,\n      textValue: \"\",\n      bars: [{\n        id: 1,\n        name: 'My first shipping bar 1',\n        active: 0\n      }, {\n        id: 2,\n        name: 'My first shipping bar 2',\n        active: 1\n      }],\n      templates: [{\n        id: 1,\n        name: 'My first shipping template 1',\n        img: 'template1.png'\n      }, {\n        id: 2,\n        name: 'My first shipping template 2',\n        img: 'template1.png'\n      }, {\n        id: 3,\n        name: 'My first shipping template 2',\n        img: 'template1.png'\n      }, {\n        id: 4,\n        name: 'My first shipping template 2',\n        img: 'template1.png'\n      }, {\n        id: 5,\n        name: 'My first shipping template 2',\n        img: 'template1.png'\n      }, {\n        id: 6,\n        name: 'My first shipping template 2',\n        img: 'template1.png'\n      }],\n      position_options: [{\n        label: 'Top bar pushes down the rest of the page',\n        value: 'top_push_v1'\n      }, {\n        label: 'Top bar pushes down the rest of the page (always visible while scrolling)',\n        value: 'top_push_sticky_v1'\n      }, {\n        label: 'Top bar overlaps top of the page',\n        value: 'top_cover_nonsticky'\n      }, {\n        label: ' Top bar overlaps top of the page (always visible while scrolling)',\n        value: 'top_cover'\n      }, {\n        label: 'Bottom bar overlaps bottom of the page (always visible while scrolling)',\n        value: 'bottom_cover'\n      }, {\n        label: 'Manual Placement – Allows manual insertion of the bar’s code into your theme.',\n        value: 'inserted'\n      }],\n      currencies: [{\n        label: 'United states - USD',\n        value: '$'\n      }, {\n        label: 'Netherland',\n        value: 'nzd'\n      }],\n      name: 'My first free shipping bar',\n      goal: '100',\n      goal_two: '150',\n      init_msg_start: 'Free shipping for orders over',\n      init_msg_end: '',\n      goal_msg: \"Congratulations! You've got free shipping\",\n      progress_msg_start: 'Only',\n      progress_msg_end: ' away from free shipping',\n      link_opt: 'off',\n      link_url: 'https://apps.shopify.com/partners/me',\n      is_link_new: 0,\n      is_close_btn: 'no',\n      position: 'top_push_sticky_v1',\n      currency: 'nzd',\n      cur_symbol: 'nzd',\n      is_auto_cur: 'on',\n      bg_color: '#312e59',\n      bg_color_opacity: 0.5\n    };\n    _this.state.textValue = _this.props.color;\n    _this.toggleColorPicker = _this.toggleColorPicker.bind(_assertThisInitialized(_this));\n    _this.handleTextChange = _this.handleTextChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(FreeShippingBar, [{\n    key: \"hexToRgb\",\n    value: function hexToRgb(hex) {\n      var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n\n      if (hex) {\n        hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n          return r + r + g + g + b + b;\n        });\n      }\n\n      var returnResult = {\n        red: 0,\n        green: 0,\n        blue: 0\n      };\n      var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\n      if (result) {\n        returnResult = (_readOnlyError(\"returnResult\"), {\n          red: parseInt(result[1], 16),\n          green: parseInt(result[2], 16),\n          blue: parseInt(result[3], 16)\n        });\n      }\n\n      return returnResult;\n    }\n  }, {\n    key: \"toggleColorPicker\",\n    value: function toggleColorPicker() {\n      this.setState({\n        isColorPickerOpen: !this.state.isColorPickerOpen\n      });\n    }\n  }, {\n    key: \"formatHexToHsb\",\n    value: function formatHexToHsb(hex) {\n      return rgbToHsb(this.hexToRgb(hex));\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.color !== this.props.color) {\n        this.setState({\n          textValue: nextProps.color\n        });\n      }\n    }\n  }, {\n    key: \"handleTextChange\",\n    value: function handleTextChange(value) {\n      this.setState({\n        textValue: value\n      });\n\n      try {\n        var color = this.hexToRgb(value);\n\n        if (color) {\n          this.props.onChange(value);\n        }\n      } catch (err) {}\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _ref, _ref2, _ref3, _ref4, _ref5;\n\n      var _this$state = this.state,\n          name = _this$state.name,\n          goal = _this$state.goal,\n          goal_two = _this$state.goal_two,\n          init_msg_start = _this$state.init_msg_start,\n          init_msg_end = _this$state.init_msg_end,\n          progress_msg_start = _this$state.progress_msg_start,\n          progress_msg_end = _this$state.progress_msg_end,\n          goal_msg = _this$state.goal_msg,\n          link_opt = _this$state.link_opt,\n          link_url = _this$state.link_url,\n          is_link_new = _this$state.is_link_new,\n          is_close_btn = _this$state.is_close_btn,\n          position = _this$state.position,\n          position_options = _this$state.position_options,\n          currencies = _this$state.currencies,\n          currency = _this$state.currency,\n          cur_symbol = _this$state.cur_symbol,\n          is_auto_cur = _this$state.is_auto_cur,\n          bg_color = _this$state.bg_color,\n          bg_color_opacity = _this$state.bg_color_opacity;\n      return __jsx(Page, null, __jsx(Layout, null, __jsx(Layout.Section, {\n        oneHalf: true\n      }, __jsx(Card, {\n        sectioned: true\n      }, __jsx(Stack, null, __jsx(Stack.Item, {\n        fill: true\n      }, __jsx(Heading, null, \"Free Shipping Bar (FSB) Dashboard\")), __jsx(Stack.Item, null, __jsx(Button, {\n        primary: true\n      }, \"Create New Bar\"))), __jsx(\"div\", {\n        className: \"Polaris-DataTable\"\n      }, __jsx(\"div\", {\n        className: \"Polaris-DataTable__ScrollContainer\"\n      }, __jsx(\"table\", {\n        id: \"bars\",\n        className: \"Polaris-DataTable__Table\"\n      }, __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", {\n        className: \"Polaris-DataTable__Cell Polaris-DataTable__Cell--verticalAlignTop Polaris-DataTable__Cell--firstColumn Polaris-DataTable__Cell--header\"\n      }, \"Name\"), __jsx(\"th\", {\n        className: \"Polaris-DataTable__Cell Polaris-DataTable__Cell--verticalAlignTop Polaris-DataTable__Cell--firstColumn Polaris-DataTable__Cell--header\"\n      }, \"Actions\"))), __jsx(\"tbody\", null, this.renderDashboardTableData()))))))), __jsx(Form, {\n        onSubmit: this.handleSubmit\n      }, __jsx(Layout, null, __jsx(Layout.Section, {\n        oneThird: true\n      }, __jsx(Card, {\n        title: \"Basic Template\",\n        sectioned: true\n      }, __jsx(FormLayout, null, __jsx(\"div\", {\n        className: \"fsb_tp_container\"\n      }, __jsx(\"div\", {\n        className: \"fsbStyles.fsb_tb_content\",\n        style: (_ref = {\n          backgroundColor: \"rgb(30, 30, 32)\",\n          color: \"rgb(242, 202, 128)\"\n        }, _defineProperty(_ref, \"backgroundColor\", \"rgb(30, 30, 32)\"), _defineProperty(_ref, \"color\", \"rgb(242, 202, 128)\"), _defineProperty(_ref, \"textAlign\", \"center\"), _defineProperty(_ref, \"fontSize\", \"16px\"), _defineProperty(_ref, \"fontWeight\", \"normal\"), _defineProperty(_ref, \"lineheight\", \"20px\"), _defineProperty(_ref, \"padding\", \"12px\"), _defineProperty(_ref, \"fontFamily\", \"Helvetica\"), _ref)\n      }, \"Bold and Clear\")), __jsx(\"div\", {\n        className: \"fsb_tp_container\"\n      }, __jsx(\"div\", {\n        className: \"fsb_tb_content\",\n        style: (_ref2 = {\n          backgroundColor: \"rgb(30, 30, 32)\",\n          color: \"rgb(242, 202, 128)\"\n        }, _defineProperty(_ref2, \"backgroundColor\", \"rgb(30, 30, 32)\"), _defineProperty(_ref2, \"color\", \"rgb(242, 202, 128)\"), _defineProperty(_ref2, \"textAlign\", \"center\"), _defineProperty(_ref2, \"fontSize\", \"16px\"), _defineProperty(_ref2, \"fontWeight\", \"normal\"), _defineProperty(_ref2, \"lineheight\", \"20px\"), _defineProperty(_ref2, \"padding\", \"12px\"), _defineProperty(_ref2, \"fontFamily\", \"Helvetica\"), _ref2)\n      }, \"Bold and Clear\"))))), __jsx(Layout.Section, {\n        oneThird: true\n      }, __jsx(Card, {\n        title: \"Prenium Template\",\n        sectioned: true\n      }, __jsx(FormLayout, null, __jsx(\"div\", {\n        className: \"fsb_tp_container\"\n      }, __jsx(\"div\", {\n        className: \"fsbStyles.fsb_tb_content\",\n        style: (_ref3 = {\n          backgroundColor: \"rgb(30, 30, 32)\",\n          color: \"rgb(242, 202, 128)\"\n        }, _defineProperty(_ref3, \"backgroundColor\", \"rgb(30, 30, 32)\"), _defineProperty(_ref3, \"color\", \"rgb(242, 202, 128)\"), _defineProperty(_ref3, \"textAlign\", \"center\"), _defineProperty(_ref3, \"fontSize\", \"16px\"), _defineProperty(_ref3, \"fontWeight\", \"normal\"), _defineProperty(_ref3, \"lineheight\", \"20px\"), _defineProperty(_ref3, \"padding\", \"12px\"), _defineProperty(_ref3, \"fontFamily\", \"Helvetica\"), _ref3)\n      }, \"Bold and Clear\")), __jsx(\"div\", {\n        className: \"fsb_tp_container\"\n      }, __jsx(\"div\", {\n        className: \"fsb_tb_content\",\n        style: (_ref4 = {\n          backgroundColor: \"rgb(30, 30, 32)\",\n          color: \"rgb(242, 202, 128)\"\n        }, _defineProperty(_ref4, \"backgroundColor\", \"rgb(30, 30, 32)\"), _defineProperty(_ref4, \"color\", \"rgb(242, 202, 128)\"), _defineProperty(_ref4, \"textAlign\", \"center\"), _defineProperty(_ref4, \"fontSize\", \"16px\"), _defineProperty(_ref4, \"fontWeight\", \"normal\"), _defineProperty(_ref4, \"lineheight\", \"20px\"), _defineProperty(_ref4, \"padding\", \"12px\"), _defineProperty(_ref4, \"fontFamily\", \"Helvetica\"), _ref4)\n      }, \"Bold and Clear\")))))), __jsx(Layout, null, __jsx(Layout.Section, null, __jsx(Card, {\n        title: \"Preview\",\n        sectioned: true\n      }, __jsx(FormLayout, null, __jsx(\"div\", {\n        className: \"fsb_tp_container\"\n      }, __jsx(\"div\", {\n        className: \"fsb_tb_content\",\n        style: (_ref5 = {\n          backgroundColor: \"rgb(30, 30, 32)\",\n          color: \"rgb(242, 202, 128)\"\n        }, _defineProperty(_ref5, \"backgroundColor\", \"rgb(30, 30, 32)\"), _defineProperty(_ref5, \"color\", \"rgb(242, 202, 128)\"), _defineProperty(_ref5, \"textAlign\", \"center\"), _defineProperty(_ref5, \"fontSize\", \"16px\"), _defineProperty(_ref5, \"fontWeight\", \"normal\"), _defineProperty(_ref5, \"lineheight\", \"20px\"), _defineProperty(_ref5, \"padding\", \"12px\"), _defineProperty(_ref5, \"fontFamily\", \"Helvetica\"), _ref5)\n      }, \"My first shipping bar1\")))))), __jsx(Layout, null, __jsx(Layout.Section, null, __jsx(Card, {\n        title: \"Content Configuration\",\n        sectioned: true\n      }, __jsx(FormLayout, null, __jsx(TextField, {\n        value: name,\n        onChange: this.handleChange('name'),\n        label: \"Name: \",\n        type: \"text\",\n        helpText: \"For your own internal reference - only you can see it\"\n      }), __jsx(FormLayout.Group, null, __jsx(TextField, {\n        value: goal,\n        onChange: this.handleChange('goal'),\n        label: \"Free Shipping Goal: \",\n        type: \"number\",\n        helpText: \"If no minimum order value is required, please set goal to 0\"\n      }), __jsx(Button, {\n        primary: true\n      }, \"Add Secondary Goal\")), __jsx(FormLayout.Group, null, __jsx(TextField, {\n        value: goal_two,\n        onChange: this.handleChange('goal_two'),\n        label: \"Free Shipping Secondary Goal: \",\n        type: \"number\",\n        helpText: \"Secondary goal needs to be greater than the 1st free shipping goal\"\n      }), __jsx(Button, {\n        primary: true\n      }, \"Remove Secondary Goal\")), __jsx(FormLayout.Group, null, __jsx(TextField, {\n        value: init_msg_start,\n        onChange: this.handleChange('init_msg_start'),\n        label: \"Initial Message: \",\n        type: \"text\",\n        helpText: \"Display when cart is empty\"\n      }), __jsx(\"div\", {\n        className: \"fsb_msg_price\"\n      }, \"$100\"), __jsx(TextField, {\n        value: init_msg_end,\n        onChange: this.handleChange('init_msg_end'),\n        label: \" \",\n        type: \"text\"\n      })), __jsx(FormLayout.Group, null, __jsx(TextField, {\n        value: progress_msg_start,\n        onChange: this.handleChange('progress_msg_start'),\n        label: \"Progress Message: \",\n        type: \"text\",\n        helpText: \"Displays when cart value is less than the goal\"\n      }), __jsx(\"div\", {\n        className: \"fsb_msg_price\"\n      }, \"$99\"), __jsx(TextField, {\n        value: progress_msg_end,\n        onChange: this.handleChange('progress_msg_end'),\n        label: \" \",\n        type: \"text\"\n      })), __jsx(TextField, {\n        value: goal_msg,\n        onChange: this.handleChange('goal_msg'),\n        label: \"Goal Achieved Message:: \",\n        type: \"text\",\n        helpText: \"Displays when cart value is greater than goal\"\n      }), __jsx(Select, {\n        label: \"Add Link to the Bar (optional):\",\n        options: [{\n          label: 'ON',\n          value: 'on'\n        }, {\n          label: 'OFF',\n          value: 'off'\n        }],\n        onChange: this.handleChange('link_opt'),\n        value: link_opt,\n        helpText: \"The bar will be clickable after adding a link\"\n      }), __jsx(TextField, {\n        value: link_url,\n        onChange: this.handleChange('link_url'),\n        label: \"Link URL:\",\n        type: \"text\",\n        helpText: \"This address will be visited after clicking the bar\"\n      }), __jsx(Checkbox, {\n        label: \"Open the link in a NEW tab when clicked\",\n        checked: is_link_new,\n        onChange: this.handleChange('is_link_new')\n      }), __jsx(Select, {\n        label: \"Include Close Button:\",\n        options: [{\n          label: 'YES',\n          value: 'yes'\n        }, {\n          label: 'NO',\n          value: 'no'\n        }],\n        onChange: this.handleChange('is_close_btn'),\n        value: is_close_btn,\n        helpText: \"Places an \\\"x\\\" button on the bar so that users can close it manually\"\n      }), __jsx(ChoiceList, {\n        title: \"Select a Display Position:\",\n        choices: position_options,\n        selected: position,\n        onChange: this.handleChange('position')\n      }))))), __jsx(Layout, null, __jsx(Layout.Section, null, __jsx(Card, {\n        title: \"Currency Configuration\",\n        sectioned: true\n      }, __jsx(FormLayout, null, __jsx(Select, {\n        label: \"Currency:\",\n        options: currencies,\n        onChange: this.handleChange('currency'),\n        value: currency,\n        helpText: \"Places an \\\"x\\\" button on the bar so that users can close it manually\"\n      }), __jsx(TextField, {\n        value: cur_symbol,\n        onChange: this.handleChange('cur_symbol'),\n        label: \"Currency Symbol::\",\n        type: \"text\"\n      }), __jsx(Select, {\n        label: \"Auto Currency Conversion::\",\n        options: [{\n          label: 'OFF',\n          value: 'on'\n        }, {\n          label: 'ON',\n          value: 'off'\n        }],\n        onChange: this.handleChange('is_auto_cur'),\n        value: is_auto_cur,\n        helpText: \"NOTE: If native Shopify multi-currencies is configured on your store, this Currency Configuration will be disabled. You can enable this if your website supports auto-currency detection. FSB auto-converts the goal value to the visitors' local currency\"\n      }))))), __jsx(Layout, null, __jsx(Layout.Section, null, __jsx(Card, {\n        title: \"Style Configuration\",\n        sectioned: true\n      }, __jsx(FormLayout, null, __jsx(FormLayout.Group, null, __jsx(\"div\", null)), __jsx(RangeSlider, {\n        label: \"Background Color Opacity:\",\n        value: bg_color_opacity,\n        min: 0,\n        max: 1,\n        step: 0.1,\n        onChange: this.handleChange('bg_color_opacity'),\n        output: true\n      }), __jsx(FormLayout.Group, null, __jsx(\"a\", {\n        href: \"\",\n        onClick: \"select_background_pic('img/bar_background/20170206_sales_01.png')\"\n      }, __jsx(\"div\", {\n        style: \"height:25px; margin: 10px 0; padding:10px; font-size:16px; color:#FFFFFF; font-family:'Roboto'; background: url('https://s3.amazonaws.com/lastsecondcoupon/img/bar_background/20170206_sales_01.png')\"\n      }, \"Sales\"))))))), __jsx(Stack, {\n        distribution: \"trailing\"\n      }, __jsx(Button, {\n        primary: true,\n        submit: true\n      }, \"Save\"))));\n    }\n  }, {\n    key: \"renderDashboardTableData\",\n    value: function renderDashboardTableData() {\n      return this.state.bars.map(function (bar, index) {\n        var id = bar.id,\n            name = bar.name;\n        return __jsx(\"tr\", {\n          className: \"Polaris-DataTable__TableRow\",\n          key: id\n        }, __jsx(\"td\", {\n          className: \"Polaris-DataTable__Cell Polaris-DataTable__Cell--verticalAlignTop\"\n        }, __jsx(Stack, null, __jsx(Badge, {\n          status: \"success\"\n        }, \"Active\"), name)), __jsx(\"td\", {\n          className: \"Polaris-DataTable__Cell Polaris-DataTable__Cell--verticalAlignTop\"\n        }, __jsx(Stack, null, __jsx(Button, {\n          primary: true\n        }, \"Edit\"), __jsx(Button, null, \"Duplicate\"), __jsx(Button, null, \"Activate\"))));\n      });\n    }\n  }]);\n\n  return FreeShippingBar;\n}(React.Component);\n\n_defineProperty(FreeShippingBar, \"propTypes\", {\n  color: PropTypes.string,\n  label: PropTypes.string,\n  onChange: PropTypes.func\n});\n\nexport default FreeShippingBar;","map":{"version":3,"sources":["E:/WORSPACE/shopify/work/shopifyapp-shipping-bar/pages/index.js"],"names":["Button","Card","Form","FormLayout","Layout","Page","SettingToggle","Stack","TextField","TextStyle","DataTable","Heading","Badge","Select","Checkbox","ChoiceList","ColorPicker","Popover","RangeSlider","hsbToHex","rgbToHsb","PropTypes","fsbStyles","LoneAnonymousOperationRule","FreeShippingBar","props","setState","name","state","goal","console","log","field","value","isColorPickerOpen","textValue","bars","id","active","templates","img","position_options","label","currencies","goal_two","init_msg_start","init_msg_end","goal_msg","progress_msg_start","progress_msg_end","link_opt","link_url","is_link_new","is_close_btn","position","currency","cur_symbol","is_auto_cur","bg_color","bg_color_opacity","color","toggleColorPicker","bind","handleTextChange","hex","shorthandRegex","replace","m","r","g","b","returnResult","red","green","blue","result","exec","parseInt","hexToRgb","nextProps","onChange","err","renderDashboardTableData","handleSubmit","backgroundColor","handleChange","map","bar","index","React","Component","string","func"],"mappings":"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","sourcesContent":["import {\r\n  Button,\r\n  Card,\r\n  Form,\r\n  FormLayout,\r\n  Layout,\r\n  Page,\r\n  SettingToggle,\r\n  Stack,\r\n  TextField,\r\n  TextStyle,\r\n  DataTable,\r\n  Heading,\r\n  Badge,\r\n  Select,\r\n  Checkbox,\r\n  ChoiceList,\r\n  ColorPicker,\r\n  Popover,\r\n  RangeSlider\r\n} from '@shopify/polaris';\r\nimport {hsbToHex, rgbToHsb} from '@shopify/polaris';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nimport fsbStyles from './styles/free-shipping-bar.module.css';\r\nimport { LoneAnonymousOperationRule } from 'graphql';\r\n\r\n\r\nclass FreeShippingBar extends React.Component {\r\n  static propTypes = {\r\n    color: PropTypes.string,\r\n    label: PropTypes.string,\r\n    onChange: PropTypes.func\r\n  }\r\n  constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        isColorPickerOpen: false,\r\n        textValue: \"\",\r\n\r\n        bars: [\r\n            { id: 1, name: 'My first shipping bar 1',active:0 },\r\n            { id: 2, name: 'My first shipping bar 2',active:1 },\r\n        ],\r\n        templates: [\r\n          { id: 1, name: 'My first shipping template 1', img: 'template1.png' },\r\n          { id: 2, name: 'My first shipping template 2', img: 'template1.png' },\r\n          { id: 3, name: 'My first shipping template 2', img: 'template1.png' },\r\n          { id: 4, name: 'My first shipping template 2', img: 'template1.png' },\r\n          { id: 5, name: 'My first shipping template 2', img: 'template1.png' },\r\n          { id: 6, name: 'My first shipping template 2', img: 'template1.png' },\r\n        ],\r\n        position_options : [\r\n            {label: 'Top bar pushes down the rest of the page', value: 'top_push_v1'},\r\n            {label: 'Top bar pushes down the rest of the page (always visible while scrolling)', value: 'top_push_sticky_v1'},\r\n            {label: 'Top bar overlaps top of the page', value: 'top_cover_nonsticky'},\r\n            {label: ' Top bar overlaps top of the page (always visible while scrolling)', value: 'top_cover'},\r\n            {label: 'Bottom bar overlaps bottom of the page (always visible while scrolling)', value: 'bottom_cover'},\r\n            {label: 'Manual Placement – Allows manual insertion of the bar’s code into your theme.', value: 'inserted'},\r\n        ],\r\n        currencies : [\r\n          {label: 'United states - USD', value: '$'},\r\n          {label: 'Netherland', value: 'nzd'}\r\n        ],\r\n        name: 'My first free shipping bar',\r\n        goal: '100',\r\n        goal_two: '150',\r\n        init_msg_start: 'Free shipping for orders over',\r\n        init_msg_end: '',\r\n        goal_msg: \"Congratulations! You've got free shipping\",\r\n        progress_msg_start: 'Only',\r\n        progress_msg_end: ' away from free shipping',\r\n        link_opt: 'off',\r\n        link_url: 'https://apps.shopify.com/partners/me',\r\n        is_link_new: 0,\r\n        is_close_btn: 'no',\r\n        position: 'top_push_sticky_v1',\r\n        currency: 'nzd',\r\n        cur_symbol: 'nzd',\r\n        is_auto_cur: 'on',\r\n        bg_color: '#312e59',\r\n        bg_color_opacity: 0.5,\r\n    };\r\n\r\n    this.state.textValue = this.props.color;\r\n    this.toggleColorPicker = this.toggleColorPicker.bind(this);\r\n    this.handleTextChange = this.handleTextChange.bind(this);\r\n  }\r\n  \r\n  hexToRgb(hex) {\r\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n    if(hex) {\r\n      hex = hex.replace(shorthandRegex, function(m, r, g, b) {\r\n          return r + r + g + g + b + b;\r\n      });\r\n    }\r\n    \r\n    const returnResult = {\r\n      red: 0,\r\n      green: 0,\r\n      blue: 0\r\n    };\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    if (result) {\r\n      returnResult = {\r\n        red: parseInt(result[1], 16),\r\n        green: parseInt(result[2], 16),\r\n        blue: parseInt(result[3], 16)\r\n      };\r\n    }\r\n    return returnResult;\r\n  }\r\n  toggleColorPicker(){\r\n    this.setState({isColorPickerOpen: !this.state.isColorPickerOpen});\r\n  }\r\n  formatHexToHsb(hex){\r\n    return rgbToHsb(this.hexToRgb(hex));\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if(nextProps.color !== this.props.color){\r\n      this.setState({textValue: nextProps.color});\r\n    } \r\n  }\r\n  handleTextChange(value){\r\n    this.setState({textValue: value});\r\n    try{\r\n      let color = this.hexToRgb(value);\r\n      if(color){\r\n        this.props.onChange(value);\r\n      }\r\n    }catch(err){\r\n    }\r\n  }\r\n  render() {\r\n    const { name, goal,goal_two, init_msg_start, init_msg_end, progress_msg_start, progress_msg_end, goal_msg, link_opt, link_url,is_link_new, is_close_btn, position, position_options, currencies, currency,cur_symbol,is_auto_cur, bg_color, bg_color_opacity } = this.state;\r\n\r\n    return (\r\n        <Page>\r\n          <Layout>\r\n            <Layout.Section oneHalf>\r\n              <Card sectioned>\r\n                <Stack>\r\n                  <Stack.Item fill>\r\n                    <Heading>Free Shipping Bar (FSB) Dashboard</Heading>\r\n                  </Stack.Item>\r\n                  <Stack.Item>\r\n                    <Button primary>Create New Bar</Button>\r\n                  </Stack.Item>\r\n                </Stack>\r\n                <div className=\"Polaris-DataTable\">\r\n                  <div className=\"Polaris-DataTable__ScrollContainer\">\r\n                    <table id='bars' className=\"Polaris-DataTable__Table\"> \r\n                      <thead>\r\n                        <tr>\r\n                          <th className=\"Polaris-DataTable__Cell Polaris-DataTable__Cell--verticalAlignTop Polaris-DataTable__Cell--firstColumn Polaris-DataTable__Cell--header\">Name</th>\r\n                          <th className=\"Polaris-DataTable__Cell Polaris-DataTable__Cell--verticalAlignTop Polaris-DataTable__Cell--firstColumn Polaris-DataTable__Cell--header\">Actions</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                          {this.renderDashboardTableData()}\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              </Card>\r\n            </Layout.Section>\r\n          </Layout>\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <Layout>\r\n              <Layout.Section oneThird>\r\n                      <Card title=\"Basic Template\" sectioned>\r\n                          <FormLayout>\r\n                            <div className=\"fsb_tp_container\">\r\n                              <div className=\"fsbStyles.fsb_tb_content\" style={{ \r\n                                backgroundColor: \"rgb(30, 30, 32)\",\r\n                                color: \"rgb(242, 202, 128)\",\r\n                                backgroundColor: \"rgb(30, 30, 32)\",\r\n                                color: \"rgb(242, 202, 128)\",\r\n                                textAlign: \"center\",\r\n                                fontSize: \"16px\",\r\n                                fontWeight: \"normal\",\r\n                                lineheight: \"20px\",\r\n                                padding: \"12px\",\r\n                                fontFamily: \"Helvetica\"\r\n                                }}  >\r\n                                      Bold and Clear\r\n                            </div>\r\n                            </div>\r\n                            <div className=\"fsb_tp_container\">\r\n                              <div className=\"fsb_tb_content\" style={{ \r\n                                backgroundColor: \"rgb(30, 30, 32)\",\r\n                                color: \"rgb(242, 202, 128)\",\r\n                                backgroundColor: \"rgb(30, 30, 32)\",\r\n                                color: \"rgb(242, 202, 128)\",\r\n                                textAlign: \"center\",\r\n                                fontSize: \"16px\",\r\n                                fontWeight: \"normal\",\r\n                                lineheight: \"20px\",\r\n                                padding: \"12px\",\r\n                                fontFamily: \"Helvetica\"\r\n                                }}  >\r\n                                      Bold and Clear\r\n                              </div>\r\n                            </div>\r\n                          </FormLayout>\r\n                      </Card>\r\n              </Layout.Section>\r\n              <Layout.Section oneThird>\r\n                      <Card title=\"Prenium Template\" sectioned>\r\n                          <FormLayout>\r\n                            <div className=\"fsb_tp_container\">\r\n                              <div className=\"fsbStyles.fsb_tb_content\" style={{ \r\n                                backgroundColor: \"rgb(30, 30, 32)\",\r\n                                color: \"rgb(242, 202, 128)\",\r\n                                backgroundColor: \"rgb(30, 30, 32)\",\r\n                                color: \"rgb(242, 202, 128)\",\r\n                                textAlign: \"center\",\r\n                                fontSize: \"16px\",\r\n                                fontWeight: \"normal\",\r\n                                lineheight: \"20px\",\r\n                                padding: \"12px\",\r\n                                fontFamily: \"Helvetica\"\r\n                                }}  >\r\n                                      Bold and Clear\r\n                            </div>\r\n                            </div>\r\n                            <div className=\"fsb_tp_container\">\r\n                              <div className=\"fsb_tb_content\" style={{ \r\n                                backgroundColor: \"rgb(30, 30, 32)\",\r\n                                color: \"rgb(242, 202, 128)\",\r\n                                backgroundColor: \"rgb(30, 30, 32)\",\r\n                                color: \"rgb(242, 202, 128)\",\r\n                                textAlign: \"center\",\r\n                                fontSize: \"16px\",\r\n                                fontWeight: \"normal\",\r\n                                lineheight: \"20px\",\r\n                                padding: \"12px\",\r\n                                fontFamily: \"Helvetica\"\r\n                                }}  >\r\n                                      Bold and Clear\r\n                              </div>\r\n                            </div>\r\n                          </FormLayout>\r\n                      </Card>\r\n              </Layout.Section>\r\n\r\n          </Layout>\r\n          <Layout>\r\n              <Layout.Section>\r\n                      <Card title=\"Preview\" sectioned>\r\n                          <FormLayout>\r\n                            <div className=\"fsb_tp_container\">\r\n                              <div className=\"fsb_tb_content\" style={{ \r\n                                backgroundColor: \"rgb(30, 30, 32)\",\r\n                                color: \"rgb(242, 202, 128)\",\r\n                                backgroundColor: \"rgb(30, 30, 32)\",\r\n                                color: \"rgb(242, 202, 128)\",\r\n                                textAlign: \"center\",\r\n                                fontSize: \"16px\",\r\n                                fontWeight: \"normal\",\r\n                                lineheight: \"20px\",\r\n                                padding: \"12px\",\r\n                                fontFamily: \"Helvetica\"\r\n                                }}  >\r\n                                      My first shipping bar1\r\n                              </div>\r\n                            </div>\r\n                          </FormLayout>\r\n                      </Card>\r\n              </Layout.Section>\r\n          </Layout>\r\n          <Layout>\r\n              <Layout.Section>\r\n                      <Card title=\"Content Configuration\" sectioned>\r\n                          <FormLayout>\r\n                          <TextField\r\n                              value={name}\r\n                              onChange={this.handleChange('name')}\r\n                              label=\"Name: \"\r\n                              type=\"text\"\r\n                              helpText=\"For your own internal reference - only you can see it\"\r\n                            />\r\n                            <FormLayout.Group>\r\n                            <TextField\r\n                              value={goal}\r\n                              onChange={this.handleChange('goal')}\r\n                              label=\"Free Shipping Goal: \"\r\n                              type=\"number\"\r\n                              helpText=\"If no minimum order value is required, please set goal to 0\"\r\n                            />\r\n                            <Button primary>Add Secondary Goal</Button>\r\n                            </FormLayout.Group>\r\n                            <FormLayout.Group>\r\n                            <TextField\r\n                              value={goal_two}\r\n                              onChange={this.handleChange('goal_two')}\r\n                              label=\"Free Shipping Secondary Goal: \"\r\n                              type=\"number\"\r\n                              helpText=\"Secondary goal needs to be greater than the 1st free shipping goal\"\r\n                            />\r\n                            <Button primary>Remove Secondary Goal</Button>\r\n                            </FormLayout.Group>\r\n                            <FormLayout.Group>\r\n                            <TextField\r\n                              value={init_msg_start}\r\n                              onChange={this.handleChange('init_msg_start')}\r\n                              label=\"Initial Message: \"\r\n                              type=\"text\"\r\n                              helpText=\"Display when cart is empty\"\r\n                            />\r\n                            <div className=\"fsb_msg_price\">$100</div>\r\n                             <TextField\r\n                              value={init_msg_end}\r\n                              onChange={this.handleChange('init_msg_end')}\r\n                              label=\" \"\r\n                              type=\"text\"\r\n                            />\r\n                            </FormLayout.Group>\r\n                            <FormLayout.Group>\r\n                            <TextField\r\n                              value={progress_msg_start}\r\n                              onChange={this.handleChange('progress_msg_start')}\r\n                              label=\"Progress Message: \"\r\n                              type=\"text\"\r\n                              helpText=\"Displays when cart value is less than the goal\"\r\n                            />\r\n                            <div className=\"fsb_msg_price\">$99</div>\r\n                             <TextField\r\n                              value={progress_msg_end}\r\n                              onChange={this.handleChange('progress_msg_end')}\r\n                              label=\" \"\r\n                              type=\"text\"\r\n                            />\r\n                            </FormLayout.Group>\r\n                            <TextField\r\n                              value={goal_msg}\r\n                              onChange={this.handleChange('goal_msg')}\r\n                              label=\"Goal Achieved Message:: \"\r\n                              type=\"text\"\r\n                              helpText=\"Displays when cart value is greater than goal\"\r\n                            />    \r\n                            <Select\r\n                              label=\"Add Link to the Bar (optional):\"\r\n                              options={[\r\n                                {label: 'ON', value: 'on'},\r\n                                {label: 'OFF', value: 'off'},\r\n                              ]}\r\n                              onChange={this.handleChange('link_opt')}\r\n                              value={link_opt}\r\n                              helpText=\"The bar will be clickable after adding a link\"\r\n                            />\r\n                            <TextField\r\n                              value={link_url}\r\n                              onChange={this.handleChange('link_url')}\r\n                              label=\"Link URL:\"\r\n                              type=\"text\"\r\n                              helpText=\"This address will be visited after clicking the bar\"\r\n                            />\r\n                            <Checkbox\r\n                              label=\"Open the link in a NEW tab when clicked\"\r\n                              checked={is_link_new}\r\n                              onChange={this.handleChange('is_link_new')}\r\n                            />\r\n                            <Select\r\n                              label=\"Include Close Button:\"\r\n                              options={[\r\n                                {label: 'YES', value: 'yes'},\r\n                                {label: 'NO', value: 'no'},\r\n                              ]}\r\n                              onChange={this.handleChange('is_close_btn')}\r\n                              value={is_close_btn}\r\n                              helpText='Places an \"x\" button on the bar so that users can close it manually'\r\n                            />\r\n                            <ChoiceList\r\n                              title=\"Select a Display Position:\"\r\n                              choices={position_options}\r\n                              selected={position}\r\n                              onChange={this.handleChange('position')}\r\n                            />\r\n                          </FormLayout>\r\n                      </Card>\r\n              </Layout.Section>\r\n          </Layout>\r\n          <Layout>\r\n            <Layout.Section>\r\n              <Card title=\"Currency Configuration\" sectioned>\r\n                <FormLayout>\r\n                    <Select\r\n                      label=\"Currency:\"\r\n                      options={currencies}\r\n                      onChange={this.handleChange('currency')}\r\n                      value={currency}\r\n                      helpText='Places an \"x\" button on the bar so that users can close it manually'\r\n                     />      \r\n                     <TextField\r\n                              value={cur_symbol}\r\n                              onChange={this.handleChange('cur_symbol')}\r\n                              label=\"Currency Symbol::\"\r\n                              type=\"text\"\r\n                      />         \r\n                      <Select\r\n                      label=\"Auto Currency Conversion::\"\r\n                      options={[\r\n                        {label: 'OFF', value: 'on'},\r\n                        {label: 'ON', value: 'off'}\r\n                      ]}\r\n                      onChange={this.handleChange('is_auto_cur')}\r\n                      value={is_auto_cur}\r\n                      helpText=\"NOTE: If native Shopify multi-currencies is configured on your store, this Currency Configuration will be disabled. You can enable this if your website supports auto-currency detection. FSB auto-converts the goal value to the visitors' local currency\"\r\n                      />\r\n                </FormLayout>\r\n              </Card>\r\n            </Layout.Section>\r\n          </Layout>\r\n          <Layout>\r\n            <Layout.Section>\r\n              <Card title=\"Style Configuration\" sectioned>\r\n                <FormLayout>\r\n                    <FormLayout.Group>\r\n                      <div>\r\n                        {/* <Popover\r\n                          active={this.state.isColorPickerOpen}\r\n                          onClose={this.toggleColorPicker}\r\n                          activator={<TextField label={this.props.label} onChange={this.handleTextChange} value={this.state.textValue} connectedLeft={\r\n                                  <Button onClick={this.toggleColorPicker}>\r\n                                    <div className=\"color-preview\" style={{backgroundColor: this.props.color, width: '20px', height: '20px'}} > \r\n                                    </div>\r\n                                  </Button>} />}\r\n                        >\r\n                          <ColorPicker onChange={(color) => this.props.onChange(hsbToHex(color))} color={this.formatHexToHsb(this.props.color)} />\r\n                        </Popover> */}\r\n                      </div>\r\n                    </FormLayout.Group>\r\n                    <RangeSlider\r\n                      label=\"Background Color Opacity:\"\r\n                      value={bg_color_opacity}\r\n                      min={0}\r\n                      max={1}\r\n                      step={0.1}\r\n                      onChange={this.handleChange('bg_color_opacity')}\r\n                      output\r\n                    />\r\n                    <FormLayout.Group>\r\n                        <a href=\"\" onClick=\"select_background_pic('img/bar_background/20170206_sales_01.png')\">\r\n                                            <div style=\"height:25px; margin: 10px 0; padding:10px; font-size:16px; color:#FFFFFF; font-family:'Roboto'; background: url('https://s3.amazonaws.com/lastsecondcoupon/img/bar_background/20170206_sales_01.png')\">Sales</div>\r\n                        </a>\r\n                    </FormLayout.Group>\r\n                </FormLayout>\r\n              </Card>\r\n            </Layout.Section>\r\n          </Layout>\r\n          <Stack distribution=\"trailing\">\r\n              <Button primary submit>\r\n                Save\r\n              </Button>\r\n          </Stack>\r\n        </Form>\r\n      </Page>\r\n    );\r\n  }\r\n  renderDashboardTableData() {\r\n    return this.state.bars.map((bar, index) => {\r\n      const { id, name } = bar\r\n      return (\r\n          <tr className=\"Polaris-DataTable__TableRow\" key={id}>\r\n            <td className=\"Polaris-DataTable__Cell Polaris-DataTable__Cell--verticalAlignTop\">\r\n              <Stack>\r\n                <Badge status=\"success\">Active</Badge>\r\n                {name}\r\n              </Stack>\r\n            </td>\r\n            <td className=\"Polaris-DataTable__Cell Polaris-DataTable__Cell--verticalAlignTop\">\r\n              <Stack>\r\n                <Button primary>Edit</Button>\r\n                <Button>Duplicate</Button>\r\n                <Button>Activate</Button>\r\n              </Stack>\r\n              </td>\r\n          </tr>\r\n      )\r\n    })\r\n}\r\n  handleSubmit = () => {\r\n    this.setState({\r\n      name: this.state.name,\r\n      goal: this.state.goal\r\n    });\r\n    console.log('submission', this.state);\r\n  };\r\n  handleChange = (field) => {\r\n    return (value) => this.setState({[field]: value});\r\n  };\r\n}\r\nexport default FreeShippingBar;"]},"metadata":{},"sourceType":"module"}