{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, ColorPicker, TextField, Popover } from '@shopify/polaris';\nimport { hsbToHex, rgbToHsb } from '@shopify/polaris'; // interchange will always be hex\n\nvar HexColorPicker = /*#__PURE__*/function (_Component) {\n  _inherits(HexColorPicker, _Component);\n\n  var _super = _createSuper(HexColorPicker);\n\n  function HexColorPicker(props) {\n    var _this;\n\n    _classCallCheck(this, HexColorPicker);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isColorPickerOpen: false,\n      textValue: \"\"\n    };\n    _this.state.textValue = _this.props.color;\n    _this.toggleColorPicker = _this.toggleColorPicker.bind(_assertThisInitialized(_this));\n    _this.handleTextChange = _this.handleTextChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(HexColorPicker, [{\n    key: \"hexToRgb\",\n    value: function hexToRgb(hex) {\n      var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n      hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n        return r + r + g + g + b + b;\n      });\n      var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n      return result ? {\n        red: parseInt(result[1], 16),\n        green: parseInt(result[2], 16),\n        blue: parseInt(result[3], 16)\n      } : null;\n    }\n  }, {\n    key: \"toggleColorPicker\",\n    value: function toggleColorPicker() {\n      this.setState({\n        isColorPickerOpen: !this.state.isColorPickerOpen\n      });\n    }\n  }, {\n    key: \"formatHexToHsb\",\n    value: function formatHexToHsb(hex) {\n      return rgbToHsb(this.hexToRgb(hex));\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.color !== this.props.color) {\n        this.setState({\n          textValue: nextProps.color\n        });\n      }\n    }\n  }, {\n    key: \"handleTextChange\",\n    value: function handleTextChange(value) {\n      this.setState({\n        textValue: value\n      });\n\n      try {\n        var color = this.hexToRgb(value);\n\n        if (color) {\n          this.props.onChange(value);\n        }\n      } catch (err) {}\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(\"div\", null, __jsx(Popover, {\n        active: this.state.isColorPickerOpen,\n        onClose: this.toggleColorPicker,\n        activator: __jsx(TextField, {\n          label: this.props.label,\n          onChange: this.handleTextChange,\n          value: this.state.textValue,\n          connectedRight: __jsx(Button, {\n            onClick: this.toggleColorPicker\n          }, __jsx(\"div\", {\n            className: \"color-preview\",\n            style: {\n              backgroundColor: this.props.color,\n              width: '20px',\n              height: '20px'\n            }\n          }))\n        })\n      }, __jsx(ColorPicker, {\n        onChange: function onChange(color) {\n          return _this2.props.onChange(hsbToHex(color));\n        },\n        color: this.formatHexToHsb(this.props.color)\n      })));\n    }\n  }]);\n\n  return HexColorPicker;\n}(Component);\n\n_defineProperty(HexColorPicker, \"propTypes\", {\n  color: PropTypes.string,\n  label: PropTypes.string,\n  onChange: PropTypes.func\n});\n\nexport { HexColorPicker as default };","map":{"version":3,"sources":["E:/WORSPACE/shopify/work/shopifyapp-shipping-bar/components/TextPicker.js"],"names":["React","Component","PropTypes","Button","ColorPicker","TextField","Popover","hsbToHex","rgbToHsb","HexColorPicker","props","state","isColorPickerOpen","textValue","color","toggleColorPicker","bind","handleTextChange","hex","shorthandRegex","replace","m","r","g","b","result","exec","red","parseInt","green","blue","setState","hexToRgb","nextProps","value","onChange","err","label","backgroundColor","width","height","formatHexToHsb","string","func"],"mappings":"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","sourcesContent":["\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Button, ColorPicker, TextField, Popover} from '@shopify/polaris';\r\nimport {hsbToHex, rgbToHsb} from '@shopify/polaris';\r\n\r\n// interchange will always be hex\r\n\r\nexport default class HexColorPicker extends Component {\r\n  static propTypes = {\r\n    color: PropTypes.string,\r\n    label: PropTypes.string,\r\n    onChange: PropTypes.func\r\n  }\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      isColorPickerOpen: false,\r\n      textValue: \"\"\r\n    };\r\n    this.state.textValue = this.props.color;\r\n    this.toggleColorPicker = this.toggleColorPicker.bind(this);\r\n    this.handleTextChange = this.handleTextChange.bind(this);\r\n  }\r\n\r\n  hexToRgb(hex) {\r\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n    hex = hex.replace(shorthandRegex, function(m, r, g, b) {\r\n        return r + r + g + g + b + b;\r\n    });\r\n\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? {\r\n        red: parseInt(result[1], 16),\r\n        green: parseInt(result[2], 16),\r\n        blue: parseInt(result[3], 16)\r\n    } : null;\r\n  }\r\n  toggleColorPicker(){\r\n    this.setState({isColorPickerOpen: !this.state.isColorPickerOpen});\r\n  }\r\n  formatHexToHsb(hex){\r\n    return rgbToHsb(this.hexToRgb(hex));\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if(nextProps.color !== this.props.color){\r\n      this.setState({textValue: nextProps.color});\r\n    } \r\n  }\r\n\r\n  handleTextChange(value){\r\n    this.setState({textValue: value});\r\n    try{\r\n      let color = this.hexToRgb(value);\r\n      if(color){\r\n        this.props.onChange(value);\r\n      }\r\n    }catch(err){\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <Popover\r\n          active={this.state.isColorPickerOpen}\r\n          onClose={this.toggleColorPicker}\r\n          activator={<TextField label={this.props.label} onChange={this.handleTextChange} value={this.state.textValue} connectedRight={\r\n                  <Button onClick={this.toggleColorPicker}>\r\n                    <div className=\"color-preview\" style={{backgroundColor: this.props.color, width: '20px', height: '20px'}} > \r\n                    </div>\r\n                  </Button>} />}\r\n        >\r\n          <ColorPicker onChange={(color) => this.props.onChange(hsbToHex(color))} color={this.formatHexToHsb(this.props.color)} />\r\n        </Popover>\r\n      </div>\r\n    )\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}